function			identifier
age			identifier
(			seperator
)			seperator
{			seperator
while			keyword
(			seperator
true			identifier
)			seperator
{			seperator
put			identifier
(			seperator
"			seperator
Hello			identifier
,			seperator
world			identifier
!			operator
"			seperator
)			seperator
;			seperator
string			identifier
name			identifier
;			seperator
int			identifier
age			identifier
,			seperator
birthYear1			identifier
,			seperator
birthYear2			identifier
;			seperator
put			identifier
(			seperator
"			seperator
What			identifier
is			identifier
your			identifier
name			identifier
?			seperator
"			seperator
)			seperator
;			seperator
get			identifier
(			seperator
name			identifier
)			seperator
;			seperator
put			identifier
(			seperator
"			seperator
How			identifier
old			identifier
are			identifier
you			identifier
?			seperator
"			seperator
)			seperator
;			seperator
get			identifier
(			seperator
age			identifier
)			seperator
;			seperator
birthYear1			identifier
=			operator
2023			integer
-			seperator
age			identifier
;			seperator
birthYear2			identifier
=			operator
2022			integer
-			seperator
age			identifier
;			seperator
put			identifier
(			seperator
"			seperator
You			identifier
were			identifier
born			identifier
in			identifier
"			seperator
)			seperator
;			seperator
put			identifier
(			seperator
birthYear1			identifier
)			seperator
;			seperator
put			identifier
(			seperator
"			seperator
or			identifier
"			seperator
)			seperator
;			seperator
put			identifier
(			seperator
birthYear2			identifier
)			seperator
;			seperator
put			identifier
(			seperator
"			seperator
\			seperator
n			identifier
"			seperator
)			seperator
;			seperator
put			identifier
(			seperator
"			seperator
Do			identifier
you			identifier
want			identifier
to			identifier
continue			keyword
?			seperator
(			seperator
y			identifier
/			seperator
n			identifier
)			seperator
"			seperator
)			seperator
;			seperator
char			identifier
answer			identifier
;			seperator
get			identifier
(			seperator
answer			identifier
)			seperator
;			seperator
if			keyword
(			seperator
answer			identifier
==			operator
'			seperator
n			identifier
'			seperator
)			seperator
{			seperator
break			keyword
;			seperator
}			seperator
}			seperator
return			identifier
0			integer
;			seperator
}			seperator
#			seperator
