lexeme___________________token
char			identifier
ch			identifier
;			seperator
double			identifier
a			identifier
,			seperator
b			identifier
;			seperator
while			keyword
(			seperator
1			integer
)			seperator
{			seperator
printf			identifier
(			seperator
"			seperator
Enter			identifier
an			identifier
operator			identifier
(			seperator
+			seperator
,			seperator
-			seperator
,			seperator
 *			seperator
*			operator
'			seperator
:			seperator
printf			identifier
(			seperator
"%			seperator
.			seperator
1			integer
lf			identifier
 *			seperator
*			operator
 %			seperator
.			seperator
1			integer
lf			identifier
=			operator
 %			seperator
.			seperator
1			integer
lf			identifier
\			seperator
n			identifier
"			seperator
,			seperator
a			identifier
,			seperator
b			identifier
,			seperator
a			identifier
 *			seperator
*			operator
b			identifier
)			seperator
;			seperator
break			keyword
;			seperator
case			identifier
'			seperator
/			seperator
'			seperator
:			seperator
printf			identifier
(			seperator
"%			seperator
.			seperator
1			integer
lf			identifier
/			seperator
 %			seperator
.			seperator
1			integer
lf			identifier
=			operator
 %			seperator
.			seperator
1			integer
lf			identifier
\			seperator
n			identifier
"			seperator
,			seperator
a			identifier
,			seperator
b			identifier
,			seperator
a			identifier
/			seperator
b			identifier
)			seperator
;			seperator
break			keyword
;			seperator
default			identifier
:			seperator
printf			identifier
(			seperator
"			seperator
Error			identifier
!			operator
please			identifier
write			keyword
a			identifier
valid			identifier
operator			identifier
\			seperator
n			identifier
"			seperator
)			seperator
;			seperator
}			seperator
endwhile			keyword
;			seperator
}			seperator
